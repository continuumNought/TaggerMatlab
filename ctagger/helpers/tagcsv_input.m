% tagcsv_input
% GUI for input needed to create inputs for tagcsv
%
% Usage:
%   >>  tagcsv_input()
%
% Description:
% tagcsv_input() brings up a GUI for input needed to create inputs for 
% tagcsv
%
% Function documentation:
% Execute the following in the MATLAB command window to view the function
% documentation for tagcsv_input:
%
%    doc tagcsv_input
% See also: tagcsv, pop_tagcsv
%
% Copyright (C) Kay Robbins and Thomas Rognon, UTSA, 2011-2013,
% krobbins@cs.utsa.edu
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
%
% $Log: tagcsv_input.m,v $
% $Revision: 1.0 21-Apr-2013 09:25:25 krobbins $
% $Initial version $
%

function [baseMap, cancelled, dbCredsFile, delimiter, ...
    descriptionColumn, eventColumn, filename, preservePrefix, ...
    rewriteFile, saveMapFile, tagsColumn, useGUI] = ...
    tagcsv_input()

% Setup the variables used by the GUI
baseMap = '';
cancelled = true;
dbCredsFile = '';
delimiter = '|';
descriptionColumn = 0;
eventColumn = 0;
filename = '';
preservePrefix = false;
rewriteFile = '';
saveMapFile = '';
tagsColumn = 0;
useGUI = true;
theTitle = 'Inputs for tagging csv file';
inputFig = figure( ...
    'MenuBar', 'none', ...
    'Name', theTitle, ...
    'NextPlot', 'add', ...
    'NumberTitle','off', ...
    'Resize', 'on', ...
    'Tag', theTitle, ...
    'Toolbar', 'none', ...
    'Visible', 'off', ...
    'WindowStyle', 'modal');
createLayout(inputFig);
movegui(inputFig); % Make sure it is visible
uiwait(inputFig);

    function buttons = createButtonPanel(parent)
        % Create the button panel on the side of GUI
        buttons = uiextras.Grid('Parent', parent, ...
            'Tag', 'SaveGrid', 'Spacing', 2, 'Padding', 1);
        %createControlButtons(buttons);
        uiextras.Empty('Parent', buttons);
        uicontrol('Parent', buttons, ...
            'Style', 'pushbutton', 'Tag', 'OkayButton', ...
            'String', 'Okay', 'Enable', 'on', 'Tooltip', ...
            'Save the current configuration in a file', ...
            'Callback', {@okayCallback});
        uicontrol('Parent', buttons, ...
            'Style', 'pushbutton', 'Tag', 'CancelButton', ...
            'String', 'Cancel', 'Enable', 'on', 'Tooltip', ...
            'Cancel the study tagging', ...
            'Callback', {@cancelCallback});
        set(buttons, 'RowSizes', 30, 'ColumnSizes', [-1 100 100]);
    end % createButtonPanel

    function createLayout(parent)
        % Create the layout for the GUI but do not display
        mainVBox = uiextras.VBox('Parent', parent, ...
            'Tag', 'MainVBox',  'Spacing', 5, 'Padding', 5);
        uiextras.Empty('Parent', mainVBox);
        createBrowsePanel(mainVBox);
        mainHBox = uiextras.HBox('Parent', mainVBox, ...
            'Tag', 'MainHBox',  'Spacing', 5, 'Padding', 5);
        uiextras.Empty('Parent', mainHBox);
        createColumnGroup(mainHBox);
        uiextras.Empty('Parent', mainHBox);
        createOptionsGroup(mainHBox);
        uiextras.Empty('Parent', mainHBox);
        uiextras.Empty('Parent', mainVBox);
        createButtonPanel(mainVBox);
        uiextras.Empty('Parent', mainVBox);
        set(mainHBox, 'Sizes', [0, -1, 5, -1, 0]);
        set(mainVBox, 'Sizes', [-1, 170, 170,  -1,  30, -1]);
        drawnow
    end % createLayout

    function createBrowsePanel(parent)
        fBox = uiextras.Grid('Parent', parent, ...
            'Tag', 'FileEntryGrid', 'Spacing', 5);
        uicontrol('Parent', fBox, ...
            'Style','text', 'String', 'Event data', ...
            'HorizontalAlignment', 'Right');
        uicontrol('Parent', fBox, ...
            'Style','text', 'String', 'Save data', ...
            'HorizontalAlignment', 'Right');
        uicontrol('Parent', fBox, ...
            'Style','text', 'String', 'Base tags', ...
            'HorizontalAlignment', 'Right');
        uicontrol('Parent', fBox, ...
            'Style','text', 'String', 'Save tags', ...
            'HorizontalAlignment', 'Right');
        uicontrol('Parent', fBox, ...
            'Style','text', 'String', 'DB creds', ...
            'HorizontalAlignment', 'Right');
        eventTypeCtrl = uicontrol('Parent', fBox, 'Style', 'edit', ...
            'BackgroundColor', 'w', 'HorizontalAlignment', 'Left', ...
            'Tag', 'CSVEdit', 'String', '', ...
            'TooltipString', ...
            'Event data input file name', ...
            'Callback', {@eventTypeCtrlCallback});
        saveEventDataCtrl = uicontrol('Parent', fBox, 'Style', 'edit', ...
            'BackgroundColor', 'w', 'HorizontalAlignment', 'Left', ...
            'Tag', 'RewriteEdit', 'String', '', ...
            'TooltipString', ...
            'Complete path for saving the event type data', ...
            'Callback', {@saveEventDataCtrlCallback});
        tagsCtrl = uicontrol('Parent', fBox, 'style', 'edit', ...
            'BackgroundColor', 'w', 'HorizontalAlignment', 'Left', ...
            'Tag', 'BaseTagsEdit', 'String', '', ...
            'TooltipString', ...
            'Directory of .set files for visualization', ...
            'Callback', {@tagsCtrlCallback});
        saveTagsCtrl = uicontrol('Parent', fBox, 'Style', 'edit', ...
            'BackgroundColor', 'w', 'HorizontalAlignment', 'Left', ...
            'Tag', 'SaveTags', 'String', '', ...
            'TooltipString', ...
            'Complete path for saving the consolidated event tags', ...
            'Callback', {@saveTagsCtrlCallback});
        dbCredsCtrl = uicontrol('Parent', fBox, 'Style', 'edit', ...
            'BackgroundColor', 'w', 'HorizontalAlignment', 'Left', ...
            'Tag', 'DBCreds', 'String', '', ...
            'TooltipString', ...
            'Complete path for database credentials file', ...
            'Callback', {@dbCredsCtrlCallback});
        uicontrol('Parent', fBox, ...
            'string', 'Browse', ...
            'style', 'pushbutton', 'TooltipString', ...
            'Press to bring up file chooser chooser', ...
            'Callback', {@browseEventTypeCallback, eventTypeCtrl, ...
            'Browse for input directory'});
        uicontrol('Parent', fBox, ...
            'string', 'Browse', ...
            'style', 'pushbutton', 'TooltipString', ...
            'Press to bring up file chooser chooser', ...
            'Callback', {@browseSaveCsvCallback, saveEventDataCtrl, ...
            'Browse for input directory'});
        uicontrol('Parent', fBox, ...
            'string', 'Browse', 'style', 'pushbutton', ...
            'TooltipString', 'Press to choose BaseTags file', ...
            'Callback', {@browseTagsCallback, tagsCtrl, ...
            'Browse for base tags'});
        uicontrol('Parent', fBox, ...
            'string', 'Browse', 'style', 'pushbutton', ...
            'TooltipString', 'Press to find directory to save tags object', ...
            'Callback', {@browseSaveTagsCallback, saveTagsCtrl, ...
            'Browse for base tags'});
        uicontrol('Parent', fBox, ...
            'string', 'Browse', 'style', 'pushbutton', ...
            'TooltipString', 'Press to find your local database credentials file', ...
            'Callback', {@browseDbCredsCallback, dbCredsCtrl, ...
            'Browse for base tags'});
        set(fBox, 'ColumnSizes', [80, -1, 100], 'RowSizes', [30, 30, 30, 30, 30]);
    end % createBrowsePanel

    function createColumnGroup(parent)
        % Create the button panel on the side of GUI
        panel = uiextras.Panel('Parent', parent, 'Title', ...
            'Settings for csv file', 'Padding', 5);
        bBox = uiextras.Grid('Parent', panel, ...
            'Tag', 'UpdateGrid', 'Spacing', 5);
        uicontrol('Parent', bBox, ...
            'Style','text', 'String', 'Delimiter', ...
            'HorizontalAlignment', 'Right');
        uicontrol('Parent', bBox, ...
            'Style','text', 'String', 'Type cols', ...
            'HorizontalAlignment', 'Right');
        uicontrol('Parent', bBox, ...
            'Style','text', 'String', 'Tag col', ...
            'HorizontalAlignment', 'Right');
        uicontrol('Parent', bBox, ...
            'Style','text', 'String', 'Desc col', ...
            'HorizontalAlignment', 'Right');
        uicontrol('Parent', bBox, 'Style', 'edit', ...
            'BackgroundColor', 'w', 'HorizontalAlignment', 'Center', ...
            'Tag', 'EventEdit', 'String', '|', ...
            'TooltipString', ...
            'Event column(s)', ...
            'Callback', {@delimiterCtrlCallback});
        uicontrol('Parent', bBox, 'Style', 'edit', ...
            'BackgroundColor', 'w', 'HorizontalAlignment', 'Center', ...
            'Tag', 'EventEdit', 'String', '0', ...
            'TooltipString', ...
            'Event column(s)', ...
            'Callback', {@eventCtrlCallback});
        uicontrol('Parent', bBox, 'Style', 'edit', ...
            'BackgroundColor', 'w', 'HorizontalAlignment', 'Center', ...
            'Tag', 'TagEdit', 'String', '0', ...
            'TooltipString', ...
            'Tag column', ...
            'Callback', {@tagCtrlCallback});
        uicontrol('Parent', bBox, 'Style', 'edit', ...
            'BackgroundColor', 'w', 'HorizontalAlignment', 'Center', ...
            'Tag', 'DescriptionEdit', 'String', '0', ...
            'TooltipString', ...
            'Description column', ...
            'Callback', {@descriptionCtrlCallback});
        set(bBox, 'ColumnSizes', [60, -1, 10], 'RowSizes', [30, 30, 30, 30]);
    end % createColumnGroup

    function createOptionsGroup(parent)
        % Create the button panel on the side of GUI
        panel = uiextras.Panel('Parent', parent, 'Title', ...
            'Other options', 'Padding', 5);
        bBox = uiextras.Grid('Parent', panel, ...
            'Tag', 'OptionsGrid', 'Spacing', 5);
        %{'Merge', 'Replace', 'TagsOnly', 'Update'})
        u1 = uicontrol('Parent', bBox, ...
            'Style', 'CheckBox', 'Tag', 'UseGUICB', ...
            'String', 'Use GUI to edit tags', 'Enable', 'on', 'Tooltip', ...
            'Use cTagger GUI to edit consolidated tags', ...
            'Callback', @useGUICallback);
        set(u1, 'Value', get(u1, 'Max'));
        u2 = uicontrol('Parent', bBox, ...
            'Style', 'CheckBox', 'Tag', 'PreservePrefixfieldCB', ...
            'String', 'Preserve tag prefixes', 'Enable', 'on', 'Tooltip', ...
            'Do not consolidate tags that share prefixes', ...
            'Callback', @preservePrefixCallback);
        set(u2, 'Value', get(u2, 'Min'));
        set(bBox, 'ColumnSizes', 200, 'RowSizes', [30, 30, 30, 30, 30]);
    end % createOptionsGroup

    function browseDbCredsCallback(src, eventdata, dbCredsCtrl, myTitle) %#ok<INUSL>
        % Callback for browse button sets a directory for control
        [tFile, tPath] = uigetfile({'*.*', 'All files (*.*)'}, myTitle);
        dbCredsFile = fullfile(tPath, tFile);
        set(dbCredsCtrl, 'String', fullfile(tPath, tFile));
    end % browseDbCredsCtrlCallback

    function browseSaveTagsCallback(src, eventdata, saveTagsCtrl, myTitle) %#ok<INUSL>
        % Callback for browse button sets a directory for control
        startPath = get(saveTagsCtrl, 'String');
        if isempty(startPath) || ~ischar(startPath) || ~isdir(startPath)
            startPath = pwd;
        end
        dName = uigetdir(startPath, myTitle);  % Get
        if ~isempty(dName) && ischar(dName) && isdir(dName)
            saveMapFile = fullfile(dName, 'fMap.mat');
            set(saveTagsCtrl, 'String', saveMapFile);
        end
    end % browseSaveTagsCallback

    function browseSaveCsvCallback(src, eventdata, saveEventDataCtrl, myTitle) %#ok<INUSL>
        % Callback for browse button sets a directory for control
        startPath = get(saveEventDataCtrl, 'String');
        if isempty(startPath) || ~ischar(startPath) || ~isdir(startPath)
            startPath = pwd;
        end
        dName = uigetdir(startPath, myTitle);  % Get
        if ~isempty(dName) && ischar(dName) && isdir(dName)
            rewriteFile = fullfile(dName, 'eventdata.csv');
            set(saveEventDataCtrl, 'String', rewriteFile);
        end
    end % browseSaveCsvCallback

    function browseEventTypeCallback(src, eventdata, eventTypeCtrl, myTitle) %#ok<INUSL>
        % Callback for browse button sets a directory for control
        [fName, fPath] = uigetfile({'*.csv', 'CSV Files'}, myTitle);
        fName = fullfile(fPath, fName);
        if ~isempty(fName) && ischar(fName) && exist(fName, 'file')
            set(eventTypeCtrl, 'String', fName);
            filename = fName;
        end
    end % browseEventTypeCallback

    function browseTagsCallback(src, eventdata, tagsCtrl, myTitle) %#ok<INUSL>
        % Callback for browse button sets a directory for control
        [tFile, tPath] = uigetfile({'*.mat', 'MATLAB Files (*.mat)'}, myTitle);
        baseMap = fullfile(tPath, tFile);
        set(tagsCtrl, 'String', baseMap);
    end % browseEventDataCallback

    function cancelCallback(src, eventdata)  %#ok<INUSD>
        % Callback for browse button sets a directory for control
        baseMap = '';
        cancelled = true;
        delimiter = '|';
        dbCredsFile = '';
        descriptionColumn = 0;
        eventColumn = 0;
        preservePrefix = false;
        saveMapFile = '';
        filename = '';
        rewriteFile = '';
        tagsColumn = 0;
        useGUI = true;
        close(inputFig);
    end % cancelTagsCallback

    function dbCredsCtrlCallback(hObject, eventdata, tagsCtrl) %#ok<INUSD>
        % Callback for user directly editing directory control textbox
        dbCredsFile = get(hObject, 'String');
    end % dbCredsCtrlCallback

    function okayCallback(src, eventdata)  %#ok<INUSD>
        % Callback for closing GUI window
        cancelled = false;
        close(inputFig);
    end % okayCallback

    function preservePrefixCallback(src, eventdata) %#ok<INUSD>
        preservePrefix = get(src, 'Max') == get(src, 'Value');
    end % preservePrefixCallback

    function saveTagsCtrlCallback(hObject, eventdata, saveTagsCtrl) %#ok<INUSD>
        % Callback for user directly editing directory control textbox
        saveMapFile = get(hObject, 'String');
    end % tagsCtrlCallback

    function saveEventDataCtrlCallback(hObject, eventdata, saveEventDataCtrl) %#ok<INUSD>
        % Callback for user directly editing directory control textbox
        rewriteFile = get(hObject, 'String');
    end % tagsCtrlCallback

    function delimiterCtrlCallback(src, eventdata) %#ok<INUSD>
        delimiter = get(src, 'String');
    end  % delimiterCtrlCallback

    function eventCtrlCallback(src, eventdata) %#ok<INUSD>
        str = get(src,'String');
        pattern = '^[0-9]+(,[0-9]+)*$';
        if isempty(regexp(str, pattern, 'match'))
            set(src,'string','0');
            warndlg(['Input must be a number or a comma separated list' ...
                ' of numbers']);
        end
        eventColumn = str2double(get(src, 'String'));
    end % tagCtrlCallback

    function tagCtrlCallback(src, eventdata) %#ok<INUSD>
        str = get(src,'String');
        pattern = '^[0-9]+$';
        if isempty(regexp(str, pattern, 'match'))
            set(src,'string','0');
            warndlg('Input must be a number');
        end
        tagsColumn = str2double(get(src, 'String'));
    end % tagCtrlCallback

    function descriptionCtrlCallback(src, eventdata) %#ok<INUSD>
        str = get(src,'String');
        pattern = '^[0-9]+$';
        if isempty(regexp(str, pattern, 'match'))
            set(src,'string','0');
            warndlg('Input must be a number');
        end
        descriptionColumn = str2double(get(src, 'String'));
    end % tagCtrlCallback

    function eventTypeCtrlCallback(hObject, eventdata) %#ok<INUSD>
        % Callback for user directly editing directory control textbox
        eventTypeFile = get(hObject, 'String');
        if exist(eventTypeFile, 'file')
            filename = eventTypeFile;
        else  % if user entered invalid directory reset back
            set(hObject, 'String', filename);
        end
    end % dirCtrlCallback

    function tagsCtrlCallback(hObject, eventdata, tagsCtrl) %#ok<INUSD>
        % Callback for user directly editing directory control textbox
        baseMap = get(hObject, 'String');
    end % tagsCtrlCallback

    function useGUICallback(src, eventdata) %#ok<INUSD>
        useGUI = get(src, 'Max') == get(src, 'Value');
    end % useGUICallback

end % tagstudy_input